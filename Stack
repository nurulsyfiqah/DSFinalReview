public class Stack<T> {
    private ListNode head;

    public Stack(ListNode head) {
        this.head = head;
    }

    public boolean isEmpty() {
        return (head==null);
    }

    public int getSize() {
        int count=0;
        ListNode currentNode = head;
        while (currentNode != null) {
            currentNode = currentNode.getLink();
            count++;
        }
        return count;
    }

    public T pop() {
        if (head == null)
            return null;
        T temp = (T) head.getData();
        head = head.getLink();
        return temp;
    }

    public T peek() {
        if (head == null)
            return null;
        else
            return (T) head.getData();
    }

    public void push(T a) {
        head = new ListNode(a, head);
    }

    public void showStack() {
        if (isEmpty())
            System.out.println("Empty Stack");
        else {
            ListNode currentNode = head;
            while (currentNode != null) {
                System.out.print(currentNode.toString());
                currentNode = currentNode.getLink();
            }
        }
    }

    // ---------------- Linked List Implementation ----------------

    public void pushL(int x){
        ListNode temp = new ListNode();

        if (temp == null) {
            System.out.print("\nHeap Overflow");
            return;
        }
        temp.setData(x);
        temp.setLink(head);
        head = temp;
    }

    public void popL() {
        // check for stack underflow
        if (head == null) {
            System.out.print("\nStack Underflow");
            return;
        }

        head = head.getLink();
    }

}
